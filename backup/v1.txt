
#
# from datetime import datetime, timedelta, timezone
# from typing import Annotated
#
# from fastapi import Depends, FastAPI, HTTPException, status
# from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
# from jose import JWTError, jwt
# from passlib.context import CryptContext
# from pydantic import BaseModel
#
# from fastapi import FastAPI, Depends, HTTPException
# from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
# from typing import Optional, List
# from jose import JWTError, jwt
# from pydantic import BaseModel
# from datetime import datetime, timedelta
#
# SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
# ALGORITHM = "HS256"
# ACCESS_TOKEN_EXPIRE_MINUTES = 30
#
# fake_users_db = {
#     "johndoe": {
#         "username": "johndoe",
#         "full_name": "John Doe",
#         "email": "johndoe@example.com",
#         "hashed_password": "$2b$12$Y.LHFu/99GIGmlpsuaJJlenGAtc/KTMnsMDiU/gBPaUAcS0ADuoMq",
#         "disabled": False,
#     }
# }
#
# class Token(BaseModel):
#     access_token: str
#     token_type: str
#
#
# class TokenData(BaseModel):
#     username: str | None = None
#
#
# class User(BaseModel):
#     username: str
#     email: str | None = None
#     full_name: str | None = None
#     disabled: bool | None = None
#
# class Order(BaseModel):
#     item_name: str
#     quantity: int
#
# class UserInDB(User):
#     hashed_password: str
#
# orders = []
#
# pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
#
# oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
#
# app = FastAPI()
#
# def verify_password(plain_password, hashed_password):
#     return pwd_context.verify(plain_password, hashed_password)
#
# def get_password_hash(password):
#     return pwd_context.hash(password)
#
# def get_user(db, username: str):
#     if username in db:
#         user_dict = db[username]
#         return UserInDB(**user_dict)
#
#
# def authenticate_user(fake_db, username: str, password: str):
#     user = get_user(fake_db, username)
#     if not user:
#         return False
#     if not verify_password(password, user.hashed_password):
#         return False
#     return user
#
#
# def create_access_token(data: dict, expires_delta: timedelta | None = None):
#     to_encode = data.copy()
#     if expires_delta:
#         expire = datetime.now(timezone.utc) + expires_delta
#     else:
#         expire = datetime.now(timezone.utc) + timedelta(minutes=15)
#     to_encode.update({"exp": expire})
#     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
#     return encoded_jwt
#
#
# async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
#     credentials_exception = HTTPException(
#         status_code=status.HTTP_401_UNAUTHORIZED,
#         detail="Could not validate credentials",
#         headers={"WWW-Authenticate": "Bearer"},
#     )
#     try:
#         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
#         username: str = payload.get("sub")
#         if username is None:
#             raise credentials_exception
#         token_data = TokenData(username=username)
#     except JWTError:
#         raise credentials_exception
#     user = get_user(fake_users_db, username=token_data.username)
#     if user is None:
#         raise credentials_exception
#     return user
#
#
# async def get_current_active_user(
#     current_user: Annotated[User, Depends(get_current_user)],
# ):
#     if current_user.disabled:
#         raise HTTPException(status_code=400, detail="Inactive user")
#     return current_user
#
#
# @app.post("/token")
# async def login_for_access_token(
#     form_data: Annotated[OAuth2PasswordRequestForm, Depends()],
# ) -> Token:
#     user = authenticate_user(fake_users_db, form_data.username, form_data.password)
#     if not user:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="Incorrect username or password",
#             headers={"WWW-Authenticate": "Bearer"},
#         )
#     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
#     access_token = create_access_token(
#         data={"sub": user.username}, expires_delta=access_token_expires
#     )
#     return Token(access_token=access_token, token_type="bearer")
#
# @app.get("/users/me/", response_model=User)
# async def read_users_me(
#     current_user: Annotated[User, Depends(get_current_active_user)],
# ):
#     return current_user
#
# @app.post("/orders", dependencies=[Depends(get_current_user)])
# async def create_order(order: Order, current_user: TokenData = Depends(get_current_user)):
#     new_order = order.dict()
#     new_order["username"] = current_user.username
#     new_order["order_id"] = int(datetime.now().timestamp())
#     orders.append(new_order)
#     return {"message": "Order created successfully!"}
#
# @app.get("/orders", dependencies=[Depends(get_current_user)])
# async def get_orders(current_user: TokenData = Depends(get_current_user)):
#     user_orders = [order for order in orders if order["username"] == current_user.username]
#     return user_orders
#
# @app.put("/orders/{order_id}", dependencies=[Depends(get_current_user)])
# async def update_order(order_id: int, order: Order, current_user: TokenData = Depends(get_current_user)):
#     for index, existing_order in enumerate(orders):
#         if existing_order["order_id"] == order_id and existing_order["username"] == current_user.username:
#             new_order = order.dict()
#             new_order["username"] = current_user.username
#             new_order["order_id"] = order_id
#             orders[index] = new_order
#             return {"message": "Order updated successfully!"}
#     raise HTTPException(status_code=404, detail="Order not found")
#
# @app.delete("/orders/{order_id}", dependencies=[Depends(get_current_user)])
# async def delete_order(order_id: int, current_user: TokenData = Depends(get_current_user)):
#     for index, existing_order in enumerate(orders):
#         if existing_order["order_id"] == order_id and existing_order["username"] == current_user.username:
#             del orders[index]
#             return {"message": "Order deleted successfully!"}
#     raise HTTPException(status_code=404, detail="Order not found")
#
# # # ```": "Order updated successfully"}
# #
# # @app.delete("/orders/{order_id}", dependencies=[Depends(get_current_user)])
# # async def delete_order(order_id: int):
# #     order_to_delete = next((order for order in orders if order["id"] == order_id and order["user_id"] == get_current_user().username), None)
# #     if not order_to_delete:
# #         raise HTTPException(status_code=404, detail="Order not found")
# #     orders.remove(order_to_delete)
# #     return {"message": "Order deleted successfully"}